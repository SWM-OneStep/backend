name: Deploy to ECS

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.ECR_REPOSITORY_NAME }}:latest .
        docker tag ${{ secrets.ECR_REPOSITORY_NAME }}:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}:latest

    - name: Push Docker image to ECR
      run: |
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}:latest

    - name: Render ECS task definition
      run: |
        echo '{
          "taskDefinitionArn": "arn:aws:ecs:ap-northeast-2:637423471998:task-definition/onestep-prod-trial:1",
          "containerDefinitions": [
            {
              "name": "'${{ secrets.ECS_SERVICE_NAME }}'",
              "image": "637423471998.dkr.ecr.ap-northeast-2.amazonaws.com/'${{ secrets.ECR_REPOSITORY_NAME }}'",
              "cpu": 0,
              "portMappings": [
                {
                  "name": "onestep-prod-80-tcp",
                  "containerPort": 80,
                  "hostPort": 0,
                  "protocol": "tcp",
                  "appProtocol": "http"
                },
                {
                  "name": "djangowebserver",
                  "containerPort": 8000,
                  "hostPort": 0,
                  "protocol": "tcp",
                  "appProtocol": "http"
                }
              ],
              "essential": true,
              "environment": [],
              "environmentFiles": [],
              "mountPoints": [],
              "volumesFrom": [],
              "ulimits": [],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/onestep-prod-trial",
                  "awslogs-create-group": "true",
                  "awslogs-region": "ap-northeast-2",
                  "awslogs-stream-prefix": "ecs"
                },
                "secretOptions": []
              },
              "systemControls": []
            }
          ],
          "family": "onestep-prod-trial",
          "taskRoleArn": "arn:aws:iam::637423471998:role/ecsTaskExecutionRole-ECS",
          "executionRoleArn": "arn:aws:iam::637423471998:role/ecsTaskExecutionRole-ECS",
          "networkMode": "bridge",
          "revision": 1,
          "volumes": [],
          "status": "ACTIVE",
          "requiresAttributes": [
            {
              "name": "com.amazonaws.ecs.capability.logging-driver.awslogs"
            },
            {
              "name": "ecs.capability.execution-role-awslogs"
            },
            {
              "name": "com.amazonaws.ecs.capability.ecr-auth"
            },
            {
              "name": "com.amazonaws.ecs.capability.docker-remote-api.1.19"
            },
            {
              "name": "com.amazonaws.ecs.capability.task-iam-role"
            },
            {
              "name": "ecs.capability.execution-role-ecr-pull"
            },
            {
              "name": "com.amazonaws.ecs.capability.docker-remote-api.1.18"
            },
            {
              "name": "com.amazonaws.ecs.capability.docker-remote-api.1.29"
            }
          ],
          "placementConstraints": [],
          "compatibilities": [
            "EC2"
          ],
          "requiresCompatibilities": [
            "EC2"
          ],
          "cpu": "1024",
          "memory": "3072",
          "runtimePlatform": {
            "cpuArchitecture": "X86_64",
            "operatingSystemFamily": "LINUX"
          },
          "registeredAt": "2024-07-27T08:55:28.275Z",
          "registeredBy": "arn:aws:iam::637423471998:root",
          "tags": []
        }' > ecs-task-def.json

    - name: Register ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ecs-task-def.json
        container-name: my-app
        image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}:latest

    - name: Deploy to ECS service
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ secrets.ECS_SERVICE_NAME }}
        cluster: ${{ secrets.ECS_CLUSTER_NAME }}
        wait-for-service-stability: true
